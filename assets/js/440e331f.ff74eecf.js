"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[598],{9634:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var t=r(5893),s=r(1151);const i={sidebar_position:1},o="Cours n\xb02",a={id:"SPRING/spring-security/security-two",title:"Cours n\xb02",description:"Passons \xe0 la config JWT \ud83d\udd11",source:"@site/docs/SPRING/spring-security/security-two.md",sourceDirName:"SPRING/spring-security",slug:"/SPRING/spring-security/security-two",permalink:"/docs/SPRING/spring-security/security-two",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SPRING/spring-security/security-two.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Cours n\xb01",permalink:"/docs/SPRING/spring-security/security-one"},next:{title:"Cours n\xb03 \ud83c\udf6a",permalink:"/docs/SPRING/spring-security/security-three"}},l={},c=[{value:"Passons \xe0 la config JWT \ud83d\udd11",id:"passons-\xe0-la-config-jwt-",level:2},{value:"D\xe9pendances",id:"d\xe9pendances",level:3},{value:"Controller",id:"controller",level:3},{value:"Les services",id:"les-services",level:3},{value:"Configuration de la s\xe9curit\xe9 \ud83e\udeaa",id:"configuration-de-la-s\xe9curit\xe9-",level:3},{value:"Enregistrer un utilisateur",id:"enregistrer-un-utilisateur",level:2},{value:"Service register pour User",id:"service-register-pour-user",level:3},{value:"User DTO",id:"user-dto",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"cours-n2",children:"Cours n\xb02"}),"\n",(0,t.jsx)(n.h2,{id:"passons-\xe0-la-config-jwt-",children:"Passons \xe0 la config JWT \ud83d\udd11"}),"\n",(0,t.jsx)(n.h3,{id:"d\xe9pendances",children:"D\xe9pendances"}),"\n",(0,t.jsx)(n.p,{children:"Avant tout, ajoutons les Dependencies JWT :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:"            <dependency>\n\t\t\t<groupId>io.jsonwebtoken</groupId>\n\t\t\t<artifactId>jjwt-api</artifactId>\n\t\t\t<version>0.11.5</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>io.jsonwebtoken</groupId>\n\t\t\t<artifactId>jjwt-impl</artifactId>\n\t\t\t<version>0.11.5</version>\n\t\t\t<scope>runtime</scope>\n\t    </dependency>\n\t\t<dependency>\n\t\t\t<groupId>io.jsonwebtoken</groupId>\n\t\t\t<artifactId>jjwt-jackson</artifactId>\n\t\t\t<version>0.11.5</version>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Nous aurons 3 \xe9tapes :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Cr\xe9er notre controller pour login"}),"\n",(0,t.jsx)(n.li,{children:"Create a JwtTokenUtil class to generate and validate JWT tokens"}),"\n",(0,t.jsx)(n.li,{children:"Configure the secret key used for signing and verifying tokens"}),"\n",(0,t.jsx)(n.li,{children:"Define the expiration time for JWT tokens"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"controller",children:"Controller"}),"\n",(0,t.jsx)(n.p,{children:"Notre controller contiendra pour l\u2019instant une seule m\xe9thode :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'@RestController\npublic class AuthController {\n\n    private final UserService userService;\n    private final JwtTokenUtil jwtTokenUtil;\n    private final UserDetailsServiceImpl userDetailsService;\n\n    public AuthController(UserService userService, JwtTokenUtil jwtTokenUtil, UserDetailsServiceImpl userDetailsService) {\n        this.userService = userService;\n        this.jwtTokenUtil = jwtTokenUtil;\n        this.userDetailsService = userDetailsService;\n    }\n\n    @PostMapping("/login")\n    public ResponseEntity<?> authenticateUser(@RequestBody User loginRequest) throws Exception {\n        try {\n            userService.login(loginRequest);\n            String token = jwtTokenUtil.generateToken(userDetailsService.loadUserByUsername(loginRequest.getUsername()));\n            return ResponseEntity.ok(token);\n        } catch (BadCredentialsException e) {\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"les-services",children:"Les services"}),"\n",(0,t.jsx)(n.p,{children:"Comme vous le voyez nous avons 3 services, commen\xe7ons par coder le jwtTokenUtil"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'@Service\npublic class JwtTokenUtil {\n\n    private static String secretKey = "Juw34WOQg0Rn397En9Ek+LSH4fDEl4QSBGeN1izonY6xA2/sJLVQs2I5vT5ydJxclQUaiLNc2xqlpcodiEnQ5nGiKCXtBbmO6jkpsxBV/h9HgpzmtkSiahnqolPzE0pPEsEQBa2Sow4pLM1yRahGhKoHUBHEykKL8ADJPyJ4n578th4s5vYAaErhBnJ9rVua42RiQLa8avCo6yiKskfAdKegJvdUv/jkZNrXzeIwvjmVQvoUWvtYDgsKP/8RSBkQ5c0snaDQ/Bl7XaPsp/rk1Cy6FW6pb4p6RMyBwVsFxtMEGkM0rxjpUkinIwRxidkk5aeMU8xjx+IH9D5CIAPZzM9GgzbI7WNHMKQKp8iUkC4=";\n    public static final long JWT_TOKEN_VALIDITY = 5 * 60 * 60;\n\n\t\tpublic String generateToken(UserDetails userDetails) {\n        Date now = new Date();\n        Date expiryDate = new Date(now.getTime() + JWT_TOKEN_VALIDITY * 1000); // 1 day validity\n        return Jwts\n                .builder()\n                .setSubject(userDetails.getUsername())\n                .setIssuedAt(new Date(System.currentTimeMillis()))\n                .setExpiration(expiryDate)\n                .signWith(getSignInKey(), SignatureAlgorithm.HS256)\n                .compact();\n    }\n\n\t\tprivate Key getSignInKey() {\n        byte[] keyBytes = Decoders.BASE64.decode(secretKey);\n\n        return Keys.hmacShaKeyFor(keyBytes);\n    }\n\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Le user service :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'@Service\npublic class UserService {\n    private UserRepository userRepository;\n    private BCryptPasswordEncoder bcryptEncoder;\n    \n    public UserService(UserRepository userRepository, BCryptPasswordEncoder bcryptEncoder) {\n        this.userRepository = userRepository;\n        this.bcryptEncoder = bcryptEncoder;\n    }\n\n    public User login(User user) {\n        User userEntity = getUserEntityByUsername(user.getUsername());\n        if (!verifyHashedPasswordDuringLogin(user.getPassword(), userEntity.getPassword())) {\n            throw new RuntimeException("Le mot de passe est incorrect");\n        }\n        user.setRoles(userEntity.getRoles());\n        \n        return user;\n    }\n    \n    public boolean verifyHashedPasswordDuringLogin(String password, String hashedPassword) {\n        return bcryptEncoder.matches(password, hashedPassword);\n    }\n\n    public User getUserEntityByUsername(String username) {\n        try {\n            return userRepository.findByUsername(username);\n        } catch (Exception e) {\n            throw new RuntimeException("L\'email n\'existe pas");\n        }\n    }\n    \n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Le user details service :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"@Service\npublic class UserDetailsServiceImpl implements UserDetailsService {\n\n    private final UserRepository userRepository;\n\n    UserDetailsServiceImpl(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\n        return new UserPrincipal(userRepository.findByUsername(username));\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Mhhh ",(0,t.jsx)(n.code,{children:"new UserPrincipal"})," \ud83e\uddd0"]}),"\n",(0,t.jsx)(n.p,{children:"C\u2019est la classe qui va nous servir \xe0 construire notre object de type UserDetails"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"public class UserPrincipal implements UserDetails {\n\n    private final User user;\n    public UserPrincipal(User user) {\n        this.user = user;\n    }\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        List<GrantedAuthority> authorities = new ArrayList<>();\n        authorities.add(new SimpleGrantedAuthority(user.getRoles().getType()));\n        return authorities;\n    }\n\n    @Override\n    public String getPassword() {\n        return user.getPassword();\n    }\n\n    @Override\n    public String getUsername() {\n        return user.getUsername();\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return false;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return false;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return false;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return user.getEnabled();\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configuration-de-la-s\xe9curit\xe9-",children:"Configuration de la s\xe9curit\xe9 \ud83e\udeaa"}),"\n",(0,t.jsxs)(n.p,{children:["Maintenant, il va falloir que l\u2019on passe \xe0 la config de la securit\xe9 ! Pour ce faire, nous cr\xe9ons un fichier que l\u2019on appellera ",(0,t.jsx)(n.code,{children:"SecurityConfig"})," \xe0 l\u2019int\xe9rieur d\u2019application"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    private final JwtAuthenticationFilter jwtAuthenticationFilter;\n\n    public SecurityConfig(JwtAuthenticationFilter jwtAuthenticationFilter) {\n        this.jwtAuthenticationFilter = jwtAuthenticationFilter;\n    }\n\n    @Bean\n    public BCryptPasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n                .authorizeHttpRequests((requests) -> requests\n                        .requestMatchers("/register", "/login").permitAll()\n                        .requestMatchers("/logout", "/user-admin-data").hasAnyAuthority("USER", "ADMIN")\n                        .requestMatchers("/admin", "/only-admin-data").hasAuthority("ADMIN")\n                        .requestMatchers("/articles/**")\n                        .authenticated())\n                .csrf((csrf) -> csrf.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) // You can disable csrf protection by removing this line\n                        .ignoringRequestMatchers("/register", "/login")\n                        .disable()  // D\xe9commentez pour d\xe9sactiver en entier la protection CSRF en d\xe9veloppement\n                )\n                .sessionManagement(session -> session\n                                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)// Spring Security ne cr\xe9e pas de session\n                        // Nous allons utiliser JWT pour g\xe9rer les sessions\n                );\n        http.addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);\n        return http.build(); // Tr\xe8s important de retourner le r\xe9sultat de la m\xe9thode build() !\n        // Sinon rien de tout \xe7a ne fonctionne !\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Ajoutons des donn\xe9es manuellement en BDD afin de pouvoir effectuer un petit test"}),"\n",(0,t.jsx)(n.p,{children:"Proc\xe9dons maintenant \xe0 la cr\xe9ation du jwtAuthenticationFilter :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'public class JwtAuthenticationFilter extends OncePerRequestFilter {\n\n    private final JwtTokenUtil jwtTokenUtil;\n\n    private final UserDetailsServiceImpl userDetailsService;\n\n    JwtAuthenticationFilter(JwtTokenUtil jwtTokenUtil, UserDetailsServiceImpl userDetailsService) {\n        this.jwtTokenUtil = jwtTokenUtil;\n        this.userDetailsService = userDetailsService;\n    }\n\n    @Override\n    protected void doFilterInternal(\n            @NonNull HttpServletRequest request,\n            @NonNull HttpServletResponse response,\n            @NonNull FilterChain filterChain\n    ) throws ServletException, IOException {\n        String authHeader = request.getHeader("Authorization");\n        final String jwt;\n        final String userEmail;\n\n        if (authHeader == null ||!authHeader.startsWith("Bearer ")) {\n            filterChain.doFilter(request, response);\n            return;\n        }\n        jwt = authHeader.substring(7);\n        userEmail = jwtTokenUtil.getUsernameFromToken(jwt);\n\n        if (userEmail != null && SecurityContextHolder.getContext().getAuthentication() == null) {\n            UserDetails userDetails = this.userDetailsService.loadUserByUsername(userEmail);\n            if (jwtTokenUtil.isTokenValid(jwt, userDetails)) {\n                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(\n                        userDetails,\n                        null,\n                        userDetails.getAuthorities()\n                );\n                authToken.setDetails(\n                        new WebAuthenticationDetailsSource().buildDetails(request)\n                );\n                SecurityContextHolder.getContext().setAuthentication(authToken);\n            }\n        }\n\n        filterChain.doFilter(request, response);\n    }\n'})}),"\n",(0,t.jsx)(n.h2,{id:"enregistrer-un-utilisateur",children:"Enregistrer un utilisateur"}),"\n",(0,t.jsxs)(n.p,{children:["Voyons voir maintenant pour la partie register, cr\xe9ons un service d\xe9di\xe9e.\nPour ce faire, nous allons renommer notre ",(0,t.jsx)(n.code,{children:"UserService"}),"  en UserLoginService, car le fait qu\u2019il y ai dedans des methodes pour le login & le register nous ferait aller \xe0 l\u2019encontre de notre fameux S de solid (single responsability principle babe !)"]}),"\n",(0,t.jsx)(n.p,{children:"Voici le code de notre UserRegistrationService qui va contenir deux fonctions :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"UserRegistration"})," qui permet d'appeler notre deuxi\xe8me fonction afin de hasher notre mdp, d'enregistrer en BDD notre User via le repository, puis de return le User via un DTO"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GenerateHashedPassword"})," qui nous permet d'hasher le mot de passe du ",(0,t.jsx)(n.code,{children:"user"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"service-register-pour-user",children:"Service register pour User"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"@Service\npublic class UserRegistrationService {\n    private UserRepository userRepository;\n    private BCryptPasswordEncoder bcryptPasswordEncoder;\n    private UserMapper userMapper;\n\n    public UserRegistrationService(\n        UserRepository userRepository,\n        BCryptPasswordEncoder bcryptPasswordEncoder,\n        UserMapper userMapper\n    ) {\n        this.userRepository = userRepository;\n        this.bcryptPasswordEncoder = bcryptPasswordEncoder;\n        this.userMapper = userMapper;\n    }\n\n    public UserDTO UserRegistration(User userData) throws Exception {\n        userData.setPassword(GenerateHashedPassword(userData.getPassword()));\n        try {\n            return userMapper.transformUserEntityInUserDto(userRepository.save(userData), true);\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());\n        }\n}\n\n    public String GenerateHashedPassword(String password) {\n        return bcryptPasswordEncoder.encode(password);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"user-dto",children:"User DTO"}),"\n",(0,t.jsx)(n.p,{children:"Nous avons besoin maintenant de coder notre DTO, alors direction le package DTO pour cr\xe9er UserMapper :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'@Service\npublic class UserMapper {\n\n    public UserDTO transformUserEntityInUserDto(User user, Boolean isForResponse) {\n        UserDTO userDTO = new UserDTO();\n        userDTO.setEmail(user.getEmail());\n        userDTO.setFirstName(user.getFirstName());\n        userDTO.setLastName(user.getLastName());\n        userDTO.setUsername(user.getUsername());\n        userDTO.setEnabled(true);\n        userDTO.setRoles(user.getRoles());\n        userDTO.setPassword(isForResponse ? "" : user.getPassword());\n\n        return userDTO;\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Bon, tout \xe7a c'est bien beau mais j'ai besoin d\xe9sormais d'une nouvelle route dans mon joli ",(0,t.jsx)(n.code,{children:"AuthController"})," afin d'\xe9xecuter tout cela !"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'@PostMapping("/register")\n    public ResponseEntity<?> register(@RequestBody User userBody) throws RegistrationErrorException {\n        try {\n            return ResponseEntity.status(201).body(userRegistrationService.UserRegistration(userBody));\n        } catch (Exception e) {\n            throw new RegistrationErrorException(e.getMessage());\n        }\n    }\n'})}),"\n",(0,t.jsx)(n.p,{children:"TADAMMM, d\xe9sormais tout est ok pour pouvoir Cr\xe9er un nouvel utilisateur puis qu'il se log par la suite \ud83d\ude04"}),"\n",(0,t.jsx)(n.p,{children:"Tu pensais que c'\xe9tait fini hein ? Je te laisse regarder la suite si tu es fan de \ud83c\udf6a, \xe7a devrait te plaire \ud83d\ude09."})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>a,a:()=>o});var t=r(7294);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);