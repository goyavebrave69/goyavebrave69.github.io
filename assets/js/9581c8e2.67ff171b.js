"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[204],{7110:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>o});var s=n(5893),r=n(1151);const i={sidebar_position:1},a="Les Tests en SPRING",c={id:"SPRING/spring-test/test-one",title:"Les Tests en SPRING",description:"Tutoriel : Test JUnit pour l'entit\xe9 Article en Java",source:"@site/docs/SPRING/spring-test/test-one.md",sourceDirName:"SPRING/spring-test",slug:"/SPRING/spring-test/test-one",permalink:"/docs/SPRING/spring-test/test-one",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SPRING/spring-test/test-one.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"SPRING - Les tests",permalink:"/docs/category/spring---les-tests"}},l={},o=[{value:"<strong>Tutoriel : Test JUnit pour l&#39;entit\xe9 Article en Java</strong>",id:"tutoriel--test-junit-pour-lentit\xe9-article-en-java",level:3},{value:"\xc9tape 1 : Cr\xe9er une classe de test",id:"\xe9tape-1--cr\xe9er-une-classe-de-test",level:3},{value:"\xc9tape 2 : Mettre en place l&#39;environnement de test",id:"\xe9tape-2--mettre-en-place-lenvironnement-de-test",level:3},{value:"\xc9tape 3 : Tester l&#39;ID de l&#39;article",id:"\xe9tape-3--tester-lid-de-larticle",level:3},{value:"\xc9tape 4 : Tester le titre de l&#39;article",id:"\xe9tape-4--tester-le-titre-de-larticle",level:3},{value:"\xc9tape 5 : Tester la description de l&#39;article",id:"\xe9tape-5--tester-la-description-de-larticle",level:3},{value:"\xc9tape 6 : Tester la date de cr\xe9ation de l&#39;article",id:"\xe9tape-6--tester-la-date-de-cr\xe9ation-de-larticle",level:3},{value:"\xc9tape 7 : Tester les commentaires de l&#39;article",id:"\xe9tape-7--tester-les-commentaires-de-larticle",level:3},{value:"\xc9tape 8 : Ex\xe9cuter les tests",id:"\xe9tape-8--ex\xe9cuter-les-tests",level:3},{value:"Tester un controller",id:"tester-un-controller",level:2},{value:"Tester cr\xe9ation d\u2019article",id:"tester-cr\xe9ation-darticle",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"les-tests-en-spring",children:"Les Tests en SPRING"}),"\n",(0,s.jsx)(t.h3,{id:"tutoriel--test-junit-pour-lentit\xe9-article-en-java",children:(0,s.jsx)(t.strong,{children:"Tutoriel : Test JUnit pour l'entit\xe9 Article en Java"})}),"\n",(0,s.jsx)(t.h3,{id:"\xe9tape-1--cr\xe9er-une-classe-de-test",children:"\xc9tape 1 : Cr\xe9er une classe de test"}),"\n",(0,s.jsxs)(t.p,{children:["Cr\xe9ez une nouvelle classe de test pour l'entit\xe9 ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"Article"})}),". Cette classe de test contiendra les m\xe9thodes de test pour v\xe9rifier le comportement de votre entit\xe9."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ArticleTest {\n\n    private Article article;\n\n    @BeforeEach\n    public void setUp() {\n        article = new Article();\n    }\n\n    // Ajoutez ici vos m\xe9thodes de test\n}\n\n"})}),"\n",(0,s.jsx)(t.h3,{id:"\xe9tape-2--mettre-en-place-lenvironnement-de-test",children:"\xc9tape 2 : Mettre en place l'environnement de test"}),"\n",(0,s.jsxs)(t.p,{children:["Utilisez l'annotation ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"@BeforeEach"})})," pour cr\xe9er une m\xe9thode d'initialisation qui sera ex\xe9cut\xe9e avant chaque test. Dans cette m\xe9thode, initialisez une instance de l'entit\xe9 ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"Article"})}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"@BeforeEach\npublic void setUp() {\n    article = new Article();\n}\n\n"})}),"\n",(0,s.jsx)(t.h3,{id:"\xe9tape-3--tester-lid-de-larticle",children:"\xc9tape 3 : Tester l'ID de l'article"}),"\n",(0,s.jsx)(t.p,{children:"\xc9crivez une m\xe9thode de test pour v\xe9rifier la configuration et la r\xe9cup\xe9ration de l'ID de l'article."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"@Test\npublic void testArticleId() {\n    Long id = 1L;\n    article.setId(id);\n    assertEquals(id, article.getId());\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"\xe9tape-4--tester-le-titre-de-larticle",children:"\xc9tape 4 : Tester le titre de l'article"}),"\n",(0,s.jsx)(t.p,{children:"\xc9crivez une m\xe9thode de test pour v\xe9rifier la configuration et la r\xe9cup\xe9ration du titre de l'article."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'@Test\npublic void testArticleTitle() {\n    String title = "Test Title";\n    article.setTitle(title);\n    assertEquals(title, article.getTitle());\n}\n\n'})}),"\n",(0,s.jsx)(t.h3,{id:"\xe9tape-5--tester-la-description-de-larticle",children:"\xc9tape 5 : Tester la description de l'article"}),"\n",(0,s.jsx)(t.p,{children:"\xc9crivez une m\xe9thode de test pour v\xe9rifier la configuration et la r\xe9cup\xe9ration de la description de l'article."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'@Test\npublic void testArticleDescription() {\n    String description = "Test Description";\n    article.setDescription(description);\n    assertEquals(description, article.getDescription());\n}\n\n'})}),"\n",(0,s.jsx)(t.h3,{id:"\xe9tape-6--tester-la-date-de-cr\xe9ation-de-larticle",children:"\xc9tape 6 : Tester la date de cr\xe9ation de l'article"}),"\n",(0,s.jsx)(t.p,{children:"\xc9crivez une m\xe9thode de test pour v\xe9rifier si la date de cr\xe9ation de l'article est correcte."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"@Test\npublic void testArticleCreatedAt() {\n    LocalDateTime createdAt = LocalDateTime.now();\n    assertEquals(createdAt.getYear(), article.getCreatedAt().getYear());\n    assertEquals(createdAt.getMonth(), article.getCreatedAt().getMonth());\n    assertEquals(createdAt.getDayOfMonth(), article.getCreatedAt().getDayOfMonth());\n}\n\n"})}),"\n",(0,s.jsx)(t.h3,{id:"\xe9tape-7--tester-les-commentaires-de-larticle",children:"\xc9tape 7 : Tester les commentaires de l'article"}),"\n",(0,s.jsx)(t.p,{children:"\xc9crivez une m\xe9thode de test pour v\xe9rifier la configuration et la r\xe9cup\xe9ration des commentaires de l'article."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"@Test\npublic void testArticleComments() {\n    List<Comment> comments = new ArrayList<>();\n    Comment comment1 = new Comment();\n    Comment comment2 = new Comment();\n    comments.add(comment1);\n    comments.add(comment2);\n\n    article.setComments(comments);\n    assertNotNull(article.getComments());\n    assertEquals(2, article.getComments().size());\n}\n\n"})}),"\n",(0,s.jsx)(t.h3,{id:"\xe9tape-8--ex\xe9cuter-les-tests",children:"\xc9tape 8 : Ex\xe9cuter les tests"}),"\n",(0,s.jsx)(t.p,{children:"Ex\xe9cutez les tests en utilisant votre environnement de d\xe9veloppement int\xe9gr\xe9 (IDE) ou en utilisant Maven. Assurez-vous que tous les tests passent avec succ\xe8s."}),"\n",(0,s.jsx)(t.h2,{id:"tester-un-controller",children:"Tester un controller"}),"\n",(0,s.jsx)(t.p,{children:"D\xe9sormais, allons cr\xe9er un test pour notre Controller d\u2019article"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'@SpringBootTest\n@AutoConfigureMockMvc\npublic class ArticleControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n\t@Test\n    public void testGetAllArticles() throws Exception {\n\n        mockMvc\n                .perform(MockMvcRequestBuilders.get("/articles")\n                        .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andExpect(MockMvcResultMatchers.jsonPath("$[0].title").value("Sujet sant\xe9e"));\n    }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Petit hic \ud83d\ude15\xa0on se prend une erreur en pleine tronche :\u2019("}),"\n",(0,s.jsx)(t.p,{children:"Eh oui, notre application est s\xe9curis\xe9e donc il faut avoir un token"}),"\n",(0,s.jsx)(t.p,{children:"Pour se faire, allons essayer dans un premier temps de mani\xe8re brutale en r\xe9cup\xe9rant le token en dur via insomnia"}),"\n",(0,s.jsx)(t.p,{children:"Super, maintenant de mani\xe8re plus propre, on va r\xe9cup\xe9rer directement le token depuis notre code :"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'public String loginHelper() throws Exception {\n        JSONObject jo = new JSONObject();\n        jo.put("username", "goyave");\n        jo.put("password", "admin");\n        ;\n\n        ResultActions resultActions = mockMvc.perform(\n                        MockMvcRequestBuilders.post("/login")\n                                .content(jo.toString())\n                                .contentType(MediaType.APPLICATION_JSON)\n                )\n                .andDo(MockMvcResultHandlers.print());\n        ;\n\n        MvcResult result = resultActions.andReturn();\n\n        return result.getResponse().getContentAsString();\n    }\n'})}),"\n",(0,s.jsx)(t.p,{children:"ajoutons maintenant la ligne de code dans notre test afin d\u2019utiliser le token"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'@Test\n    public void testGetAllArticles() throws Exception {\n\n        mockMvc\n                .perform(MockMvcRequestBuilders.get("/articles")\n                        .header("Authorization", "Bearer " + loginHelper())\n                        .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andExpect(MockMvcResultMatchers.jsonPath("$[0].title").value("Sujet sant\xe9e"));\n    }\n'})}),"\n",(0,s.jsx)(t.p,{children:"Exo : cr\xe9er un test de login et registration ainsi qu\u2019un test pour v\xe9rifier que l\u2019acc\xe8s est bien v\xe9rouill\xe9"}),"\n",(0,s.jsx)(t.h3,{id:"tester-cr\xe9ation-darticle",children:"Tester cr\xe9ation d\u2019article"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'@Test\n    public void testCreateArticle() throws Exception {\n\n        JSONObject article = new JSONObject();\n        article.put("title", "article de test unitaire");\n        article.put("description", "article de test unitaire");\n\n        mockMvc\n                .perform(MockMvcRequestBuilders.post("/articles")\n                        .header("Authorization", "Bearer " + loginHelper())\n                        .content(article.toString())\n                        .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andExpect(MockMvcResultMatchers.jsonPath("$.title").value("article de test unitaire"))\n                .andExpect(MockMvcResultMatchers.jsonPath("$.description").value("article de test unitaire"));\n    }\n'})}),"\n",(0,s.jsx)(t.p,{children:"Allons cr\xe9er une BDD sp\xe9ciale pour nos tests, nous ne voulons pas que nos tests impactent notre vraie BDD, pour ce faire nous allons utiliser h2 database, commen\xe7ons donc par les d\xe9pendances"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"<dependency>\n\t\t\t<groupId>com.h2database</groupId>\n\t\t\t<artifactId>h2</artifactId>\n\t\t\t<scope>test</scope>\n</dependency>\n"})}),"\n",(0,s.jsxs)(t.p,{children:["\xc0 l\u2019image de notre dossier main, nous allons \xe9galement faire un dossier ressources dans lequel nous allons mettre un ",(0,s.jsx)(t.a,{href:"http://application.properties",children:"application.properties"})," sp\xe9cial pour nos tests, un petit copier coller ni vu ni connu \ud83d\ude44"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"spring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driver-class-name=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=password\nspring.jpa.defer-datasource-initialization=true\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.properties.hibernate.format_sql=true\nspring.h2.console.enabled=true\n"})}),"\n",(0,s.jsx)(t.p,{children:"Afin d\u2019\xe9viter un probl\xe8me de syntaxe, nous allons rajouter ceci dans notre Entity User"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:'@Table(name = "'}),"user",(0,s.jsx)(t.code,{children:'")'}),"car h2 database a comme mot r\xe9serv\xe9 user"]}),"\n",(0,s.jsx)(t.p,{children:"Nous allons cr\xe9er un fichier pour tester notre authentication avec les annotations suivantes"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'@SpringBootTest\n@AutoConfigureMockMvc\n@TestPropertySource(\n        locations = "classpath:application-test.properties"\n)\npublic class AuthControllerTest {\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Commen\xe7ons par tester notre methode register :"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'@Autowired\nprivate MockMvc mockMvc;\n\n    @Test\n    public void testRegister() throws Exception {\n        JSONObject jsonUser = new JSONObject();\n        jsonUser.put("username", "goyaveeoui");\n        jsonUser.put("lastName", "brave");\n        jsonUser.put("firstName", "goyave");\n        jsonUser.put("password", "admin");\n        jsonUser.put("email", "goyaveeoui@goyave.com");\n        jsonUser.put("enabled", true);\n\n        mockMvc\n                .perform(MockMvcRequestBuilders.post("/register")\n                        .content(jsonUser.toString())\n                        .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(MockMvcResultMatchers.status().isCreated())\n                .andExpect(MockMvcResultMatchers.jsonPath("$.username").value("goyaveeoui"))\n                .andExpect(MockMvcResultMatchers.jsonPath("$.lastName").value("brave"))\n                .andExpect(MockMvcResultMatchers.jsonPath("$.firstName").value("goyave"))\n                .andExpect(MockMvcResultMatchers.jsonPath("$.email").value("goyaveeoui@goyave.com"))\n                .andExpect(MockMvcResultMatchers.jsonPath("$.enabled").value(true))\n                ;\n    }\n'})}),"\n",(0,s.jsx)(t.p,{children:"De cette mani\xe8re on va pouvoir s\u2019assurer que le User se cr\xe9er bien."}),"\n",(0,s.jsx)(t.p,{children:"Sachez qu\u2019avec cette config, notre BDD est actualis\xe9e \xe0 chaque lancement de test, ce qui veut dire que les data ne sont pas persist\xe9es post-test."}),"\n",(0,s.jsx)(t.p,{children:"Maintenant, occupons nous de tester notre login :"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'@Test\n    public void testLogin() throws Exception {\n\n        JSONObject jsonUser = new JSONObject();\n        jsonUser.put("username", "johndoe");\n        jsonUser.put("password", "johndoe");\n\n        MvcResult result = mockMvc\n                .perform(MockMvcRequestBuilders.post("/login")\n                        .content(jsonUser.toString())\n                        .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andReturn();\n\n        assertNotNull(result.getResponse().getContentType());\n    }\n'})}),"\n",(0,s.jsx)(t.p,{children:"Le probl\xe8me, c\u2019est qu\u2019il ne trouvera pas cet utilisateur dans la BDD, comment faire \ud83e\uddd0\xa0?"}),"\n",(0,s.jsx)(t.p,{children:"Nous allons cr\xe9er un fichier SQL qui se lancera automatiquement \xe0 chaque test, ce fichier SQL contiendra une requ\xeate qui va nous permettre d\u2019insert un USER avant chaque lancement de test, malynx le lynx ;)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"INSERT INTO role (type) VALUES ('admin');\n\nINSERT INTO \"user\" (email, first_name, is_enabled, last_name, password, username, role_id)\nVALUES ('john@doe.com', 'John', true, 'Doe', '$2a$12$S/VXri58yQkBCEIk9CnRtOSXZLFEa03dd5gJ5YwfqFH8wR6Lbfq8S', 'johndoe', 1);\n"})}),"\n",(0,s.jsx)(t.p,{children:"maintenant je vais pouvoir aller tester \xe7a"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'@Test\n    public void testLogin() throws Exception {\n\n        JSONObject jsonUser = new JSONObject();\n        jsonUser.put("username", "johndoe");\n        jsonUser.put("password", "johndoe");\n\n        MvcResult result = mockMvc\n                .perform(MockMvcRequestBuilders.post("/login")\n                        .content(jsonUser.toString())\n                        .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andReturn();\n\n        assertNotNull(result.getResponse().getContentType());\n    }\n'})})]})}function u(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>a});var s=n(7294);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);