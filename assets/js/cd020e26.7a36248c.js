"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[857],{3436:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var r=t(5893),i=t(1151);const s={sidebar_position:2},o="Base de donn\xe9e et JPA",a={id:"SPRING/tutorial-basics/db-and-jpa",title:"Base de donn\xe9e et JPA",description:"Super ! Passons d\xe9sormais \xe0 la mise en place d\u2019une des parties les plus centrales : la BDD !",source:"@site/docs/SPRING/tutorial-basics/db-and-jpa.md",sourceDirName:"SPRING/tutorial-basics",slug:"/SPRING/tutorial-basics/db-and-jpa",permalink:"/docs/SPRING/tutorial-basics/db-and-jpa",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SPRING/tutorial-basics/db-and-jpa.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"On pose les bases !",permalink:"/docs/SPRING/tutorial-basics/first-step"},next:{title:"SPRING - security",permalink:"/docs/category/spring---security"}},c={},l=[{value:"Param\xe9trages",id:"param\xe9trages",level:2},{value:"D\xe9coration des entit\xe9s \ud83c\udfc5",id:"d\xe9coration-des-entit\xe9s-",level:2},{value:"Article",id:"article",level:3},{value:"Comment",id:"comment",level:3},{value:"Mise \xe0 jour du CRUD",id:"mise-\xe0-jour-du-crud",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"base-de-donn\xe9e-et-jpa",children:"Base de donn\xe9e et JPA"}),"\n",(0,r.jsx)(n.p,{children:"Super ! Passons d\xe9sormais \xe0 la mise en place d\u2019une des parties les plus centrales : la BDD !"}),"\n",(0,r.jsx)(n.h2,{id:"param\xe9trages",children:"Param\xe9trages"}),"\n",(0,r.jsxs)(n.p,{children:["On ajoute dans le le fichier ",(0,r.jsx)(n.a,{href:"http://application.properties",children:"application.properties"})," la param\xe8tres de configuration de notre bdd"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"spring.datasource.url=jdbc:mysql://localhost:3307/spring_jpa_crud\nspring.datasource.username=goyave\nspring.datasource.password=:goy@ve1418:\n\nspring.jpa.show-sql=true\n\nspring.jpa.properties.hibernate.jdbc.time_zone=Europe/Paris\n\nspring.jpa.hibernate.ddl-auto=update\n"})}),"\n",(0,r.jsx)(n.h2,{id:"d\xe9coration-des-entit\xe9s-",children:"D\xe9coration des entit\xe9s \ud83c\udfc5"}),"\n",(0,r.jsx)(n.h3,{id:"article",children:"Article"}),"\n",(0,r.jsx)(n.p,{children:"Retournons d\xe9sormais sur notre entity afin de la d\xe9corer \ud83c\udfc5"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'@Entity\npublic class Article {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = "title", nullable = false)\n    private String title;\n    \n    @Column(name = "description", nullable = false)\n    private String description;\n\n    @Column(name = "createdAt", nullable = false)\n    private final LocalDateTime createdAt;\n\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Premi\xe8re d\xe9coration : ",(0,r.jsx)(n.code,{children:"@Entity"}),"  qui va servir \xe0 dire \xe0 Spring Data : \u201cEcoute moi bien l\u2019ami, cette classe correspond \xe0 une Entity qui doit \xeatre convertie en Table et ses attributs en colonnes, bien compris ?\u201d (un petit ton de coboye histoire de mettre un peu de pression)"]}),"\n",(0,r.jsxs)(n.p,{children:["Deuxi\xe8me d\xe9coration : ",(0,r.jsx)(n.code,{children:"@Id et GeneratedValue"})," pour pr\xe9ciser que ID est une cl\xe9 primaire et lui attribuer une strat\xe9gie de Generation automatique."]}),"\n",(0,r.jsxs)(n.p,{children:["Troisi\xe8me d\xe9coration : ",(0,r.jsx)(n.code,{children:"@Column"})," pour donner \xe0 chaque attribut un nom d\u2019\xe9quivalence de colonne en BDD en ajoutant quelques pr\xe9cisions suppl\xe9mentaires"]}),"\n",(0,r.jsxs)(n.p,{children:["Relan\xe7ons notre serveur \xe0 petit coup de ",(0,r.jsx)(n.code,{children:"mvn spring-boot:run"})," et voyons voir ce qui se trame dans la console :"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Hibernate: create table article (id bigint not null auto_increment, created_at datetime(6) not null, description varchar(255) not null, title varchar(255) not null, primary key (id)) engine=InnoDB"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Excellent, mais quelle puissance \ud83d\ude31 ! Si tu observes maintenant l\u2019\xe9tat de ta BDD tu verras qu\u2019une nouvelle table ainsi que ses colonnes ont \xe9t\xe9 cr\xe9es !"}),"\n",(0,r.jsx)(n.p,{children:"Let\u2019s go, un petit test s\u2019impose :"}),"\n",(0,r.jsxs)(n.p,{children:["GET  ",(0,r.jsx)(n.code,{children:"[localhost:8080/articles](http://localhost:8080/articles)"})," nous donne comme r\xe9sultat une response 200 avec un array vide (normal la BDD est vide \ud83d\ude00\xa0), et si jamais on essaie avec ",(0,r.jsx)(n.code,{children:"[localhost:8080/articles/4](http://localhost:8080/articles)"}),"  on aura une 404 avec ",(0,r.jsx)(n.code,{children:"Could not find article with id 4"})," ."]}),"\n",(0,r.jsx)(n.p,{children:"Super, tout fonctionne !"}),"\n",(0,r.jsx)(n.p,{children:"Maintenant un petit POST avec dans le body :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'{\n\t"title": "Sujet sant\xe9",\n\t"description": "la sant\xe9 c\'est vraiment important bro"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"SUPER ! J\u2019ai bien un article qui vient d\u2019\xeatre cr\xe9e avec une 200"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'{\n\t"id": 1,\n\t"title": "Sujet sant\xe9",\n\t"description": "la sant\xe9 c\'est vraiment important bro",\n\t"createdAt": "2023-12-08T18:06:48.037851"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Tu peux \xe9galement tester un PUT et refaire un GET, tu verras que tout s\u2019est d\xe9roul\xe9 \xe0 merveille \ud83d\ude00"}),"\n",(0,r.jsx)(n.h3,{id:"comment",children:"Comment"}),"\n",(0,r.jsxs)(n.p,{children:["Rajoutons maintenant une entity ",(0,r.jsx)(n.code,{children:"Comment"})," qui va nous servir \xe0 lier des commentaires \xe0 nos articles, pour repr\xe9senter cela en POO il nous faudra faire une relation OneToMany (un article peut avoir plusieurs commentaires et plusieurs commentaires peuvent avoir un seul article)."]}),"\n",(0,r.jsxs)(n.p,{children:["Commen\xe7ons par cr\xe9er notre Entity ",(0,r.jsx)(n.code,{children:"Comment"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'package com.crud.demo.article.domain.entity;\n\nimport jakarta.persistence.*;\n\n@Entity\npublic class Comment {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = "content", nullable = false)\n    private String content;\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Un article peut avoir plusieurs commentaires, pour repr\xe9senter cel\xe0 c\xf4t\xe9 ",(0,r.jsx)(n.code,{children:"Article"})," il nous faut un attribut comments de type List< Comment> avec l\u2019annotation @OneToMany et le getter/setter qui va bien."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'@OneToMany(mappedBy = "article", cascade= CascadeType.REMOVE)\nprivate List< Comment> comments;\n\npublic List< Comment> getComments() {\n    return comments;\n}\n\npublic void setComments(List< Comment> comments) {\n    this.comments = comments;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"C\xf4t\xe9 Comment plusieurs choses : le @ManyToOne ainsi que @JoinColumn"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.REFRESH, optional = false)\n@JoinColumn(name = "article_id", nullable = false)\nprivate Article article;\n'})}),"\n",(0,r.jsxs)(n.p,{children:["on relance tout \xe7a avec un p\u2019ti coup de ",(0,r.jsx)(n.code,{children:"mvn spring-boot:run"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"create table comment (id bigint not null auto_increment, content varchar(255) not null, article_id bigint not null, primary key (id)) engine=InnoDB\n"})}),"\n",(0,r.jsx)(n.p,{children:"d\xe9sormais on remarque que sur un GET /articles que notre body contient un comments []"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'[\n\t{\n\t\t"id": 1,\n\t\t"title": "Sujet sant\xe9e",\n\t\t"description": "la sant\xe9 c\'est vraiment important brooo",\n\t\t"comments": [],\n\t\t"createdAt": "2023-12-08T18:06:48.037851"\n\t}\n]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"mise-\xe0-jour-du-crud",children:"Mise \xe0 jour du CRUD"}),"\n",(0,r.jsx)(n.p,{children:"Mhhh, une question se pose d\xe9sormais, comment cr\xe9er un commentaire ? 2 solutions :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Faire un PUT de ",(0,r.jsx)(n.code,{children:"/articles"})," en rajoutant un objet dans le array de comments"]}),"\n",(0,r.jsx)(n.li,{children:"Cr\xe9er un controller qui va nous permettre de faire un CRUD de comment"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Pour ce tuto, nous allons voir le plus rapide : le ",(0,r.jsx)(n.code,{children:"PUT"})," ."]}),"\n",(0,r.jsx)(n.p,{children:"Cr\xe9ons un CommentRepository dans notre package infrastructure.repository"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"package com.crud.demo.article.infrastructure.repository;\n\nimport com.crud.demo.article.domain.entity.Comment;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface CommentRepository extends JpaRepository<Comment, Long> {}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Nous allons en avoir besoin dans notre Controller, pour se faire, une petite \ud83d\udc89\xa0dans ce dernier s\u2019impose !"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"private final ArticleRepository ArticleRepository;\nprivate final CommentRepository CommentRepository;\n\nArticleController(ArticleRepository ArticleRepository, CommentRepository CommentRepository) {\n     this.ArticleRepository = ArticleRepository;\n     this.CommentRepository = CommentRepository;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Dans notre m\xe9thode ",(0,r.jsx)(n.code,{children:"edit"})," ajoutons une condition pour dire que si getComments() n\u2019est pas vide, alors on cr\xe9er et ajoute les comments \xe0 l\u2019article"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'@PutMapping("/articles/{id}")\nArticle edit (@RequestBody Article newArticle, @PathVariable Long id) {\n        return ArticleRepository.findById(id)\n                .map(article -> {\n                    article.setTitle(newArticle.getTitle());\n                    article.setDescription(newArticle.getDescription());\n\n                    if (!newArticle.getComments().isEmpty()) {\n                        for (Comment comment: newArticle.getComments()) {\n                            comment.setArticle(article);\n                            CommentRepository.save(comment);\n                        }\n                    }\n                    return ArticleRepository.save(article);\n                })\n                .orElseGet(() -> {\n                    newArticle.setId(id);\n                    return ArticleRepository.save(newArticle);\n                });\n    }\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Mhhhh, apr\xe8s avoir re-run notre app, une petite erreur nous \xe9clate \xe0 la figure \ud83e\udde8 , pourtant si je vais regarder du c\xf4t\xe9 de ma BDD tout est ok \ud83e\uddd0.\nL\u2019erreur ici est d\xfbe \xe0 la s\xe9rialization qui n\u2019a pas fonctionn\xe9e correctement, nous faisons face \xe0 ce que l\u2019on appelle une ",(0,r.jsx)(n.em,{children:"\u201ccircular reference\u201d"}),"  en gros, une boucle infinie."]}),"\n",(0,r.jsx)(n.p,{children:"Cette boucle infinie vient du fait que nous essayons de serializer un Article qui contient des commentaires et dont les commentaires font r\xe9f\xe9rence \xe0 des articles et dont les articles font r\xe9f\xe9rences \xe0 des commentaires \u2026 \ud83d\udd04\ud83c\udfa1\ud83e\udd2f"}),"\n",(0,r.jsxs)(n.p,{children:["Quelle est la solution pour \xe9viter cela ? Et bien une simple annotation ",(0,r.jsx)(n.code,{children:"@JsonIgnore"})," dans notre entity Comment nous permettra d\u2019\xe9viter ce big probl\xe8me :) ."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.REFRESH, optional = false)\n@JoinColumn(name = "article_id", nullable = false)\n@JsonIgnore\nprivate Article article;\n'})}),"\n",(0,r.jsx)(n.p,{children:"On re-run notre app, et l\xe0 TADAM ! Tout fonctionne \ud83d\ude04\xa0"}),"\n",(0,r.jsxs)(n.p,{children:["Je te laisse cr\xe9er un controller pour les commentaires, car c\xf4t\xe9 front lorsque l\u2019on devra modifier ou supprimer un commentaire il faudrait que cela puisse se faire sans passer par ",(0,r.jsx)(n.code,{children:"/articles"})," ."]})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var r=t(7294);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);